Running tests...
docker-compose -f docker-compose.yml exec red-tetris-dev npm test

> red_tetris@1.0.0 test
> vitest


 DEV  v1.6.1 /usr/src/app

 ✓ src/server/models/Player.test.js  (4 tests) 4ms
stdout | src/server/index.test.js > server/index disconnect flow > disconnect calls leave and broadcasts
Player sock3 removed. Total players: 0

 ✓ src/server/index.test.js  (6 tests) 31ms
stdout | src/server/models/Game.test.js > Game Model > Player Management > should add a new player
Player Player2 added to the game. Total players: 2

stdout | src/server/models/Game.test.js > Game Model > Player Management > should remove a player
Player Player2 added to the game. Total players: 2
Player p2 removed. Total players: 1

stdout | src/server/models/Game.test.js > Game Model > Player Management > should migrate host when host leaves
Player Player2 added to the game. Total players: 2
Player host123 removed. Total players: 1
Host migrated to player Player2 (p2).

stdout | src/server/models/Game.test.js > Game Model > Player Management > should end the game when only one player remains
Player Player2 added to the game. Total players: 2
Game has started! Mode: multiplayer, Difficulty: normal, Start Level: 1
Player p2 removed. Total players: 1
Game in finished state. Winner is HostPlayer.

stdout | src/server/models/Game.test.js > Game Model > Player Management > should not add a player if the game has already started
Game has started! Mode: multiplayer, Difficulty: normal, Start Level: 1
Game is already playing. Cannot add player Latecomer.

stdout | src/server/models/Game.test.js > Game Model > Spectator Management > should add a spectator
Spectator Spectator1 added. Total spectators: 1

stdout | src/server/models/Game.test.js > Game Model > Spectator Management > should not add a duplicate spectator
Spectator Spectator1 added. Total spectators: 1

stdout | src/server/models/Game.test.js > Game Model > Spectator Management > should remove a spectator
Spectator Spectator1 added. Total spectators: 1
Spectator spec1 removed. Total spectators: 0

stdout | src/server/models/Game.test.js > Game Model > Game Logic and Collision > should not allow a piece to move beyond the left wall
Game has started! Mode: solo, Difficulty: normal, Start Level: 1

stdout | src/server/models/Game.test.js > Game Model > Game Logic and Collision > should not allow a piece to move beyond the right wall
Game has started! Mode: solo, Difficulty: normal, Start Level: 1

stdout | src/server/models/Game.test.js > Game Model > Game Logic and Collision > should not allow a piece to move into another piece
Game has started! Mode: solo, Difficulty: normal, Start Level: 1

stdout | src/server/models/Game.test.js > Game Model > Game Logic and Collision > should allow a piece to move left when valid
Game has started! Mode: solo, Difficulty: normal, Start Level: 1

stdout | src/server/models/Game.test.js > Game Model > Game Logic and Collision > should allow a piece to rotate when valid (by coordinates)
Game has started! Mode: solo, Difficulty: normal, Start Level: 1

stdout | src/server/models/Game.test.js > Game Model > Game Logic and Collision > should set the soft drop flag on player for softDrop action
Game has started! Mode: solo, Difficulty: normal, Start Level: 1

stdout | src/server/models/Game.test.js > Game Model > Game Logic and Collision > should perform a hard drop correctly
Game has started! Mode: solo, Difficulty: normal, Start Level: 1

stdout | src/server/models/Game.test.js > Game Model > Tick and Game Flow > should move the active piece down by one on a game tick
Game has started! Mode: solo, Difficulty: normal, Start Level: 1

stdout | src/server/models/Game.test.js > Game Model > Tick and Game Flow > should lock the piece when it hits the bottom
Game has started! Mode: solo, Difficulty: normal, Start Level: 1

stdout | src/server/models/Game.test.js > Game Model > Tick and Game Flow > should clear a completed line and add score
Game has started! Mode: solo, Difficulty: normal, Start Level: 1
Player Player1 cleared 1 lines.

 ✓ src/server/models/Game.test.js  (18 tests) 14ms
stdout | src/client/stores/gameStore.test.js > Game Store > Actions > `connectAndJoin` should emit "joinGame" if already connected
GameStore: Already connected, emitting joinGame.

stdout | src/client/stores/gameStore.test.js > Game Store > Actions > `connectAndJoin` should register a "once connect" listener if not connected
GameStore: Not connected. Queuing joinGame until connect event.

stdout | src/client/stores/gameStore.test.js > Game Store > Actions > `initializeStore` should call connect and register listeners
Initializing GameStore: Connecting and registering listeners...
GameStore: Listeners registered.

stdout | src/client/stores/gameStore.test.js > Game Store > Actions > `enterLobbyBrowser` should emit when connected
GameStore: Already connected, emitting enterLobbyBrowser.

stdout | src/client/stores/gameStore.test.js > Game Store > Actions > `enterLobbyBrowser` should wait for connect if not connected
GameStore: Not connected. Queuing enterLobbyBrowser until connect event.

stdout | src/client/stores/gameStore.test.js > Game Store > registerGameListeners side-effects > should set gameState and play audio in priority order
Initializing GameStore: Connecting and registering listeners...
GameStore: Listeners registered.

 ❯ src/client/stores/gameStore.test.js  (21 tests | 1 failed) 31ms
   ❯ src/client/stores/gameStore.test.js > Game Store > Actions > `initializeStore` should early return if already initialized
     → Cannot set properties of undefined (setting 'value')
 ✓ src/server/models/Piece.test.js  (2 tests) 4ms
 ✓ src/server/main.test.js  (1 test) 39ms
 ✓ src/server/services/databaseService.test.js  (4 tests) 284ms
 ✓ src/client/services/__tests__/socketService.spec.js  (3 tests) 3ms
stdout | src/client/services/__tests__/socketService.spec.js > socketService > connect updates reactive state on connect
Socket Service: Connected with ID socket-123

stdout | src/client/services/__tests__/socketService.spec.js > socketService > disconnect updates reactive state on disconnect
Socket Service: Disconnected

stdout | src/client/services/__tests__/socketService.spec.js > socketService > emit forwards events to socket
Socket Service: Connected with ID socket-123

 ✓ src/client/components/__tests__/MultiBoardGrid.spec.js  (2 tests) 35ms
 ✓ src/client/components/__tests__/GameBoard.spec.js  (10 tests) 183ms
 ✓ src/client/views/__tests__/MenuView.spec.js  (2 tests) 31ms
 ✓ src/client/components/__tests__/NextPieces.spec.js  (2 tests) 38ms
 ✓ src/client/main.spec.js  (1 test) 11ms
stdout | src/client/views/__tests__/GameView.spec.js > GameView > renders GameBoard when playing (stubbed)
Joining game 'r1' as 'p1' (Spectator: false, Difficulty: normal)

 ✓ src/client/views/__tests__/GameView.spec.js  (1 test) 40ms
 ✓ src/client/views/__tests__/HomeView.spec.js  (1 test) 38ms
 ✓ src/client/services/__tests__/audioService.spec.js  (2 tests) 4ms
stdout | src/client/services/__tests__/audioService.spec.js > audioService > init creates audio objects and sets volumes
Initializing Audio Service...

stdout | src/client/services/__tests__/audioService.spec.js > audioService > play methods call underlying play()
Initializing Audio Service...

 ✓ src/client/components/ui/__tests__/BaseButton.spec.js  (3 tests) 36ms
 ✓ src/client/App.spec.js  (1 test) 12ms
 ✓ src/client/stores/userStore.test.js  (2 tests) 4ms
 ✓ src/client/components/ui/__tests__/BaseCard.spec.js  (2 tests) 23ms

 Test Files  1 failed | 19 passed (20)
      Tests  1 failed | 87 passed (88)
   Start at  12:23:31
   Duration  2.88s (transform 526ms, setup 2ms, collect 1.92s, tests 865ms, environment 3.92s, prepare 1.42s)


 FAIL  Tests failed. Watching for file changes...
       press h to show help, press q to quit
[3Jc
 RERUN  src/client/stores/gameStore.test.js x1

stdout | src/client/stores/gameStore.test.js > Game Store > Actions > `connectAndJoin` should emit "joinGame" if already connected
GameStore: Already connected, emitting joinGame.

stdout | src/client/stores/gameStore.test.js > Game Store > Actions > `connectAndJoin` should register a "once connect" listener if not connected
GameStore: Not connected. Queuing joinGame until connect event.

stdout | src/client/stores/gameStore.test.js > Game Store > Actions > `initializeStore` should call connect and register listeners
Initializing GameStore: Connecting and registering listeners...
GameStore: Listeners registered.

stdout | src/client/stores/gameStore.test.js > Game Store > Actions > `initializeStore` should early return if already initialized
Initializing GameStore: Connecting and registering listeners...
GameStore: Listeners registered.
Store already initialized.

stdout | src/client/stores/gameStore.test.js > Game Store > Actions > `enterLobbyBrowser` should emit when connected
GameStore: Already connected, emitting enterLobbyBrowser.

stdout | src/client/stores/gameStore.test.js > Game Store > Actions > `enterLobbyBrowser` should wait for connect if not connected
GameStore: Not connected. Queuing enterLobbyBrowser until connect event.

stdout | src/client/stores/gameStore.test.js > Game Store > registerGameListeners side-effects > should set gameState and play audio in priority order
Initializing GameStore: Connecting and registering listeners...
GameStore: Listeners registered.

 ✓ src/client/stores/gameStore.test.js  (21 tests) 18ms

 Test Files  1 passed (1)
      Tests  21 passed (21)
   Start at  12:27:53
   Duration  130ms


 PASS  Waiting for file changes...
       press h to show help, press q to quit
       rerun x1
[2K[1A[2K[G